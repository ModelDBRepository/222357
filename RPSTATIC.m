% Breath_angle_effect2_static_var_dur_resp_prof.m
% static var dur response profile
% Note that this version expects to receive a tank data that has varied
% stimulus durations.  One data set for example 20140626C3Static has
% 8 different durations varying by factors of 2 from .016 to 2.15 secs.
%
% Generate response plots and sort by the breath angle in which the S_ON
% was presented.
%
% This program depends on (reads in) a tank (usually called something like
% tdt2mat_data_something.mat and an evoked spikes breath_info file that
% contains on each line a stimid, number of evoked spikes (experiment -
% control), the start angle that stimulus started at, and an end angle
% (usually the stimulus start time plus 50 ms).
%
% This program also depends on glomon and glomoff dat files that for the
% random block protocol represent the stimid's that illuminated the parent
% glomerulus (glomon) or not (glomoff).  For static files you can either
% prepare a glomon file that contains all the stimids or comment out the
% code that checks for the stimid to be a member of glomon to continue
% adding a stimid to a statistics calculation

%evoke_act_half
fid=fopen(['data/' date_path '/shared_file_pointers.dat'],'r');
line1=fgets(fid);
cmd = ['load ' line1(1:end-1) ';'];
eval(cmd);
disp(['got tank from ' cmd]);
line2 = fgets(fid);
cmd = ['load ' line2(1:end-1) ';'];
eval(cmd);
disp(['got breath_info from ' cmd]);
%data_file_matrix_name = strrep(line2(18:end-5),'.','_');
tmp=regexp(line2,'sort_breath/')
data_file_matrix_name=line2(tmp+12:end-5);

% for tank files that start with a digit (a year number for example)
cmd = ['breath_info = X' data_file_matrix_name ';']; % form for
% 20141020tdt2mat_data.mat
% for diagnostic tanks or ranks that start with a letter
%cmd = ['breath_info = ' data_file_matrix_name ';']; % form for tdt2mat_
%data_...
cmd=strrep(cmd,'/sort_breath/',''); % gets rid of the sort_breath sub folder name
cmd=strrep(cmd,'ort_breath/',''); % gets rid of the sort_breath sub folder name
% or
cmd=strrep(cmd,'sort_breath/',''); % gets rid of the sort_breath sub folder name
cmd=strrep(cmd,'0_added',''); % gets rid of the sort_breath sub folder name
cmd=strrep(cmd,'_added',''); % gets rid of the sort_breath sub folder name
%cmd=strrep(cmd,'_200',''); % gets rid of the sort_breath sub folder name
cmd=strrep(cmd,'breath/','');
cmd=strrep(cmd,'ht1_incr20','');
eval(cmd);
disp(['executed: ' cmd]);
fclose(fid);

%evoke_act_half

tdt2mat_data_index=1;
%read from breath_info file
response_start_delay=breath_info(1,11) % start looking for spikes when the stimulus starts %%% Read into response_profile_static_var_dur
response_period_end=breath_info(1,12) %The end of the response_period in real time, or the response window + response start delay
response_window=response_period_end-response_start_delay % duration of the response period.
selected_duration=breath_info(1,10)%.05 %polar plot see line 207

contr_rp_delay=breath_info(1,9)%%% Read into response_profile_static_var_dur 0.07

check_time=breath_info(1,13)%The minimum amount of time between stimulations
response_period_end_control=check_time-contr_rp_delay
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%% \\\Breath Angle Histogram Variables/// %%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%selected_duration=0.1% Stimulations of this duration or greater will be analyzed
%nearness_time=0.01%Stimulation_durations +/- the nearness_time will be analyzed
stim_delay=response_start_delay;
control_offset_time=contr_rp_delay%0.1 % no longer used. Use with breath_info data file angle 



% to set the onset of the response_period and control periods
exp_breath_info=4 %this is the colunmn of data from the breath info file (previously generated by running 
%the evoke_act_half.m program) that will be used 
contr_breath_info=6 %this is the colunmn of data from the breath info file 
%that will be used 
% to set the onset of the control_response_period

control_response_period=response_period_end_control;
response_period=response_window;%use the same window of time to 
%analyze control and experimental 
%data


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%% \\\Response Profile Only Variables/// %%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
breath_angle=5*(pi/3)%0*(pi/3)%inhibition  %3*(pi/3)***
breath_range=pi/3
response_start_delay_rp=0
centroid='evoked_centroid'
stim_angles=4
cont_angle=6

pre_stim_time=-.01; % 0.0  %decrease this value to include a greater n
post_stim_time=.01; % 0.0
check_time=.0% minimum time between stimulations (ms)
bin_width = 0.02; % set bars for histogram (units ms)

pre_isi_time=pre_stim_time;
post_isi_time=post_stim_time;

% new method to use shared_file_pointers.dat to find the tank
%fid=fopen('data/shared_file_pointers.dat','r');
fid=fopen(['data/' date_path '/shared_file_pointers.dat'],'r');
line1=fgets(fid);
cmd = ['load ' line1(1:end-1) ';'];
eval(cmd);
disp(['got tank from ' cmd]);
line2 = fgets(fid);
cmd = ['load ' line2(1:end-1) ';'];
eval(cmd);
disp(['got breath_info from ' cmd]);
%data_file_matrix_name = strrep(line2(18:end-5),'.','_');
% for tank files that start with a digit (a year number for example)
tmp=regexp(line2,'sort_breath/')
data_file_matrix_name=line2(tmp+12:end-5);
cmd = ['breath_info = X' data_file_matrix_name ';']; % form for
% 20141020tdt2mat_data.mat
% for diagnostic tanks or ranks that start with a letter
%cmd = ['breath_info = ' data_file_matrix_name ';']; % form for tdt2mat_
%data_...

eval(cmd);
disp(['executed: ' cmd]);
fclose(fid);

S_ON = tdt2mat_data.epocs.S_ON.onset(1:2:end-2);
%S_ON = tdt2mat_data.epocs.S_ON.onset(1:2:end-2); % times of start in seconds 20130703
%SOFF = tdt2mat_data.epocs.SOFF.onset(1:200);
SOFF = tdt2mat_data.epocs.SOFF.onset(1:end);%tdt2mat_data_20140814C1RandR1.mat 20140814


%SOFF = tdt2mat_data.epocs.SOFF.onset(1:end);%altered for tdt2mat_data_C2RandR4.mat 201400703 % times of stop stimulus in seconds

% detect if an SOFF occurs before an S_ON in the start of the recordings
if (SOFF(1)<S_ON(1))
    SOFF = SOFF(2:end); % this will re-align the S_ON and SOFF's together
end

% finally process S_ON, SOFFs in such a way as to make restarts of the
% dlpproj have the S_ON, SOFFs realigned if there are two S_ON's in a row.
[S_ON, SOFF ] = S_ON_SOFF_processor(S_ON, SOFF);

stimids=tdt2mat_data.epocs.S_ON.data(1:2:end-2);
stimids=[1:length(stimids)];%tdt2mat_data_20140814C1RandR1.mat 20140814
%stimids=tdt2mat_data.epocs.S_ON.data(1:2:end-2);%altered for tdt2mat_data_C2RandR4.mat 201400703 % times of stop stimulus in seconds
% for static we will rewrite the stimids in case restarted
% stimids = 1:length(stimids);

% restrict both stimids and breath_info to whichever is smaller
smallest_length=min([length(breath_info) length(stimids)]);

% ***********************************************************************
%
% for static reassign the stimids and the breath_info's stimids to be
% sequential numbers.  All that matters is that they match
%
% ***********************************************************************
%stimids = [1:smallest_length];
breath_info(1:smallest_length,1) = stimids(1:smallest_length);

ts_raw = tdt2mat_data.snips.eNeu.ts;
sortcode=tdt2mat_data.snips.eNeu.sortcode;
ts_index=1;

%generatate a ts_raw that is specific for a SC
ts_raw_sc_index=1;
ts_raw_sc=[];

first_end=min([length(SOFF) length(S_ON)]);
disp(['ave stim=' num2str(mean(SOFF(1:first_end)-S_ON(1:first_end)))])
disp(['ave ISI=' num2str(mean(S_ON(2:first_end)-SOFF(1:first_end-1)))])

for ts_index=1:length(ts_raw)
    if sortcode(ts_index)==1 
    %if sortcode(ts_index)>=1 && sortcode(ts_index) <=2 % 
    %if sortcode(ts_index)==2
        ts_raw_sc(ts_raw_sc_index)=ts_raw(ts_index);
        ts_raw_sc_index = ts_raw_sc_index + 1;
    end
end

%if the matrix dimensions do not agree use this methology
num_of_stims=min([length(S_ON) length(SOFF)]);
stim_durs=SOFF(1:num_of_stims)-S_ON(1:num_of_stims);
%
% figure
% hist(stim_durs,50)%set number of columns here
% title('stimulus durations')
disp(['Note: the biggest difference between stimulation durations is ' num2str(max(stim_durs)-min(stim_durs))]);

peri_stim_spikes_index = 1;  % record all spikes near the stimulus in peri_stim_spikes
% relative to the time of the stimulus
stim_index = 2; % start later to look earlier 1;
fid=fopen([date_path '_single_stim_elements.dat'],'w');

%xcenters=-.0475:0.005:0.2475; % magic command to make 5 ms bins from -0.05 to 0.250s
%xcenters=-.045:0.010:0.2450;% makes 10 ms bins from -0.5 to 0.250s
%bin_width = 0.01; % choice of bin size

% stim_time+pre_stim_time+post_stim_time
% pre_stim_time=.1 %  decrease this value to include a greater n
% post_stim_time=.1
%pre_stim_time=min(stim_durs) % used to be 0.2;
%post_stim_time=min(stim_durs) % used to be 0.2 but now include nothing extra ;
disp(['The pre_stim_time = ' num2str(pre_stim_time) ', the post_stim_time = ' num2str(post_stim_time)]);

% old way: largest_stim_dur=max(stim_durs);
largest_stim_dur = selected_duration; % now just use the selected duration

%xcenters=-.075-eps:bin_width:0.275; % trying to offset the bins so the 0 time belongs to the next bin
% attempt to generalize the above assignment of the xcenters:
xcenters_peri = -pre_stim_time+bin_width/2-eps:bin_width:largest_stim_dur+post_stim_time;

%xcenters=-.04:0.020:0.24;%makes 20 ms bins from -0.5 to 0.250s

%need to make format_string equal to the length of xcenters, which is 60
%for the particular recording
format_string = repmat('%g ',1, length(xcenters_peri));

% num_of_stims = 1000; % ********** override to smaller number
 
num_of_adequate=0;
%disp('sel_stim_index=[')
index_adeq_dur=1;
select_stimid_adeq_dur=[];
while stim_index <= num_of_stims-1 % end earlier to check post stim times
    % while stim_index <= 30
    stim_time = S_ON(stim_index)+response_start_delay_rp;%SMS20150305
    soff_time = SOFF(stim_index);%+response_start_delay;+response_window;%SMS20150305
    previous_soff_time = SOFF(stim_index-1);
    %next_stim_time = S_ON(stim_index+1);
    dur_time = soff_time - stim_time;
    adequate_intervals=(stim_time-previous_soff_time)>=check_time; %20140113%&& (next_stim_time-soff_time)>= check_time;
    if (selected_duration <= dur_time) && adequate_intervals % only calculate for particular dur
        num_of_adequate = num_of_adequate + 1;
        select_stimid_adeq_dur(index_adeq_dur)=stim_index;
        index_adeq_dur=index_adeq_dur+1;
        %disp([' ' num2str(stim_index)]);
        clear each_stim_APs
        each_stim_APs_index=1;
        
        for ap_index=1:length(ts_raw_sc)
            spike_time = ts_raw_sc(ap_index);
            
            if (spike_time > stim_time - pre_stim_time) && (spike_time < soff_time+post_stim_time) % stim_time + 0.1)%adjust if you want to change control periods (sec)
                peri_stim_spikes(peri_stim_spikes_index) = spike_time - stim_time;
                peri_stim_spikes_index = peri_stim_spikes_index + 1;
                
                each_stim_APs(each_stim_APs_index) = spike_time - stim_time;
                each_stim_APs_index = each_stim_APs_index + 1;
            end
        end
        if each_stim_APs_index > 2 % 1
            %nelements = hist(each_stim_APs, xcenters_peri);
        else
            nelements = zeros(1,length(xcenters_peri));
        end
        fprintf(fid, ['%g ' format_string '\n'], stimids(stim_index), nelements);
    end
    stim_index = stim_index + 1;
end
%disp('];')
fclose(fid);
disp(['num_of_adequate = ' num2str(num_of_adequate)])


%load roi.dat
%load glomoff.dat
glomon = stimids; % for static every stimid is selected for "experiment"

%contains stimids(stimid_index); 1
%evoked_sc(stimid_index); 2
%stim_angle(stimid_index); 3
%stim_angle_plus_50(stimid_index)];4
%stim_angle_plus_50 5

cmd=['load ' date_path '_single_stim_elements.dat;'];
eval(cmd);

cmd=['single_stim_elements = ' date_path '_single_stim_elements;'];
eval(cmd);
%stimid in 1st coln
%followed by 60 bins of spikes

bins_for_glomon=zeros(1, length(xcenters_peri)); % will add up the spikes for glomon
clear single_glomon_elements;
num_of_selected_stim = 0;
%disp(['The selected stimid''s are:']);
[nrows, ncols] = size(single_stim_elements);
static_bins_ttest=[];
static_bins_index=1;
for index=1:nrows
    stimid=single_stim_elements(index,1);
    [breath_info_row breath_info_col]=find(breath_info(:,1)==stimid); % look up stimid in breath_info file to find test_angle
    test_angle = breath_info(breath_info_row,stim_angles); % the third column is the breath angle of the stimulus start time
    %if ismember(single_stim_elements(index,1), glomon)% switch to glomon and glomoff to creat more figures
    if test_breath_angle(test_angle, breath_angle, breath_range) % returns true is angle in first argument is within breath_angle+- breath_range
        num_of_selected_stim = num_of_selected_stim + 1;
        single_stim_elements(index,1);
        single_glomon_elements(num_of_selected_stim,:)=single_stim_elements(index,:);
        bins_for_glomon = bins_for_glomon + single_stim_elements(index,2:end);
        %disp([num2str(single_stim_elements(index,1)) ', ']);
        static_bins_ttest(static_bins_index,:)=single_stim_elements(index,2:end);
        static_bins_index=static_bins_index+1;
    end
    %end
end

clear spk_ave spk_std spk_ste
for col_index=2:ncols
    spk_ave(col_index-1)=mean(single_glomon_elements(:,col_index));
    spk_std(col_index-1)=std(single_glomon_elements(:,col_index));
    %if ~isempty(col_stats)
    spk_ste(col_index-1)=std(single_glomon_elements(:,col_index))./(sqrt(length(single_glomon_elements)));
    %end
end

figure
label_fontsize=12; % for ylabels and titles etc.
hold on
% crashing: bar(xcenters_peri(1:end-1), (bins_for_glomon(1:end-1)./num_of_selected_stim)./bin_width)
%errorbar(xcenters_peri(1:end-1), spk_ave(1:end-1)./bin_width,spk_ste(1:end-1)./bin_width)
title(['Firing rate of peri-(glomon) stimulus spikes binned to ' num2str(bin_width*1000) ' ms intervals ' centroid],'fontsize',label_fontsize)
ylabel('instantaneous firing rates = num_of_spikes/(num_of_stims*bin_width) (Hz)', 'Interpreter', 'none','fontsize',label_fontsize)
xlabel(['time (sec), note only durations >' num2str(selected_duration) ' included. ' char(10) 'Restricted to breath_angle=' num2str(breath_angle) '+/-' num2str(breath_range)],'Interpreter','none','fontsize',label_fontsize)

% figure
% hold on
% bar(xcenters_peri(1:end-1), (bins_for_glomon(1:end-1)./num_of_selected_stim))
% errorbar(xcenters_peri(1:end-1), spk_ave(1:end-1),spk_ste(1:end-1))
% title(['Number of peri-(glomon) stimulus spikes binned to ' num2str(bin_width*1000) ' ms intervals'])
% ylabel('ave spikes/stimulation = num_of_spikes/num_of_stims (pure number)', 'Interpreter', 'none')
% xlabel('time (sec)')

% % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% new section for peri-SOFF histogram
% derived from above:

peri_isi_spikes_index = 1;  % record all spikes near the stimulus in peri_stim_spikes
% relative to the time of the stimulus
stim_index = 2; % start later to look earlier 1;
fid=fopen([date_path '_single_isi_elements.dat'],'w');

%xcenters=-.0475:0.005:0.2475; % magic command to make 5 ms bins from -0.05 to 0.250s
%xcenters=-.045:0.010:0.2450;% makes 10 ms bins from -0.5 to 0.250s
%bin_width = 0.01; % choice of bin size

% stim_time+pre_stim_time+post_stim_time
% pre_stim_time=.1 %  decrease this value to include a greater n
% post_stim_time=.1
%pre_stim_time=min(stim_durs) % used to be 0.2;
%post_stim_time=min(stim_durs) % used to be 0.2 but now include nothing extra ;
disp(['The pre_isi_time = ' num2str(pre_isi_time) ', the post_isi_time = ' num2str(post_isi_time)]);

% old way: largest_soff_dur=max(stim_durs);
largest_isi_dur = selected_duration; % now just use the selected duration

%xcenters=-.075-eps:bin_width:0.275; % trying to offset the bins so the 0 time belongs to the next bin
% attempt to generalize the above assignment of the xcenters:
xcenters_peri = -pre_isi_time+bin_width/2-eps:bin_width:largest_isi_dur+post_isi_time;

%xcenters=-.04:0.020:0.24;%makes 20 ms bins from -0.5 to 0.250s

%need to make format_string equal to the length of xcenters, which is 60
%for the particular recording
format_string = repmat('%g ',1, length(xcenters_peri));

% num_of_stims = 1000; % ********** override to smaller number
 
num_of_adequate=0;
%disp('sel_stim_index=[')
index_adeq_dur=1;
select_isi_adeq_dur=[];
while stim_index <= num_of_stims-1 % end earlier to check post stim times
    % while stim_index <= 30
    % we are going to switch S_ON to SOFF
    isi_stim_time=SOFF(stim_index)+contr_rp_delay;%SMS20150305%displaces the control window by 50 ms to eliminate the off response. 
    isi_off_time=S_ON(stim_index+1);%SOFF(stim_index)+contr_rp_delay+response_window;%SMS20150305%S_ON(stim_index+1);
    previous_isi_off_time=S_ON(stim_index);
    %next_isi_stim_time=SOFF(stim_index+1);
    isi_dur_time=isi_off_time-isi_stim_time;
      
%     stim_time = S_ON(stim_index);
%     soff_time = SOFF(stim_index);
%     previous_soff_time = SOFF(stim_index-1);
%     next_stim_time = S_ON(stim_index+1);
%     dur_time = soff_time - stim_time;
    % adequate_intervals = check_isi_time;   %20140113(isi_stim_time-previous_isi_off_time)>=check_isi_time && (next_isi_stim_time-isi_off_time)
    %adequate_intervals=(stim_time-previous_soff_time)>=check_time && (next_stim_time-soff_time)>= check_time;
    if selected_duration < isi_dur_time %&& adequate_intervals % only calculate for particular dur
        num_of_adequate = num_of_adequate + 1;
        select_isi_adeq_dur(index_adeq_dur)=stim_index;
        index_adeq_dur=index_adeq_dur+1;
        %disp([' ' num2str(stim_index)]);
        clear each_isi_APs
        each_isi_APs_index=1;
        isi_stim_time=isi_stim_time; %moves the zero of the histogram 50ms later to eliminate an off response evoked by the previous stimulus
        for ap_index=1:length(ts_raw_sc)
            spike_time = ts_raw_sc(ap_index);
            
            if (spike_time > isi_stim_time - pre_isi_time) && (spike_time < isi_off_time+post_isi_time) % stim_time + 0.1)%adjust if you want to change control periods (sec)
                peri_stim_spikes(peri_isi_spikes_index) = spike_time - isi_stim_time;
                peri_isi_spikes_index = peri_isi_spikes_index + 1;
                
                each_isi_APs(each_isi_APs_index) = spike_time - isi_stim_time;
                each_isi_APs_index = each_isi_APs_index + 1;
            end
        end
        if each_isi_APs_index > 2 % 1
            % keeps crashing nelements = hist(each_isi_APs, xcenters_peri);
        else
            nelements = zeros(1,length(xcenters_peri));
        end
        fprintf(fid, ['%g ' format_string '\n'], stimids(stim_index), nelements);
    end
    stim_index = stim_index + 1;
end
%disp('];')
fclose(fid);
disp(['num_of_adequate = ' num2str(num_of_adequate)])


%load glomon.dat
%load glomoff.dat
glomon = stimids; % for static every stimid is selected for "experiment"



cmd =['load ' date_path '_single_isi_elements.dat;'];
eval(cmd)
cmd =['single_isi_elements = ' date_path '_single_isi_elements;'];
eval(cmd)
%stimid in 1st coln
%followed by 60 bins of spikes

bins_for_isi=zeros(1, length(xcenters_peri)); % will add up the spikes for glomon
clear single_glomon_elements;
num_of_selected_stim = 0;
%disp(['The selected stimid''s are:']);
[nrows, ncols] = size(single_isi_elements);
isi_bins_ttest=[];
isi_bins_index=1;
for index=1:nrows
    stimid=single_isi_elements(index,1);
    [breath_info_row breath_info_col]=find(breath_info(:,1)==stimid); % look up stimid in breath_info file to find test_angle
    test_angle = breath_info(breath_info_row,cont_angle); % the third column is the breath angle of the stimulus control period start times +50ms
    %if ismember(single_isi_elements(index,1), glomon)% switch to glomon and glomoff to creat more figures
    if test_breath_angle(test_angle, breath_angle, breath_range) % returns true is angle in first argument is within breath_angle+- breath_range
        num_of_selected_stim = num_of_selected_stim + 1;
        single_isi_elements(index,1);
        single_glomon_elements(num_of_selected_stim,:)=single_isi_elements(index,:);
        bins_for_isi = bins_for_isi + single_isi_elements(index,2:end);
        %disp([num2str(single_isi_elements(index,1)) ', ']);
        isi_bins_ttest(isi_bins_index,:)=single_isi_elements(index,2:end);
        isi_bins_index=isi_bins_index+1;
    end
    %end
end

clear spk_ave spk_std spk_ste
for col_index=2:ncols
    spk_ave(col_index-1)=mean(single_glomon_elements(:,col_index));
    spk_std(col_index-1)=std(single_glomon_elements(:,col_index));
    %if ~isempty(col_stats)
    spk_ste(col_index-1)=std(single_glomon_elements(:,col_index))./(sqrt(length(single_glomon_elements)));
    %end
end

figure
label_fontsize=12; % for ylabels and titles etc.
hold on
%bar(xcenters_peri(1:end-1), (bins_for_isi(1:end-1)./num_of_selected_stim)./bin_width)
%errorbar(xcenters_peri(1:end-1), spk_ave(1:end-1)./bin_width,spk_ste(1:end-1)./bin_width)
title(['Firing rate of peri-("ISI") stimulus spikes binned to ' num2str(bin_width*1000) ' ms intervals ' centroid],'fontsize',label_fontsize)
ylabel('instantaneous firing rates = num_of_spikes/(num_of_stims*bin_width) (Hz)', 'Interpreter', 'none','fontsize',label_fontsize)
xlabel(['time (sec), note only ' num2str(selected_duration)  ' durations included. ' char(10) 'Restricted to breath_angle=' num2str(breath_angle) '+/-' num2str(breath_range)],'Interpreter','none','fontsize',label_fontsize)


disp('ttest across all columns of the response profile histogram')
%[h,p]=ttest2(static_bins_ttest, isi_bins_ttest);
%h, p
clear h
clear p

% select a number of columns into one column from two different parts of
% the same peri_stim histogram data
%select pre and post stim bins for ttest
% disp('ttest across pre and post stimulus times response profile histogram')
disp('ttest across pre and post stimulus times response profile histogram')
precolnB=1;
precolnE=5;

postcolnB=8;%20 p=0.0082;
postcolnE=10;

% 
% disp('ttest across pre and post stimulus times response profile histogram')
% pre_static_bins_ttest=reshape(static_bins_ttest(:,precolnB:precolnE),length(static_bins_ttest)*(precolnE-precolnB+1),1);

% post_static_bins_ttest=reshape(static_bins_ttest(:,postcolnB:postcolnE),length(static_bins_ttest)*(postcolnE-postcolnB+1),1);
% [h_pre, p_pre] = ttest2(pre_static_bins_ttest,post_static_bins_ttest)
% 
% clear h
% clear p
